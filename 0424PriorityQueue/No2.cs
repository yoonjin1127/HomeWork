using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _0424PriorityQueue
{
    internal class No2
    {
        /****************************
         * 힙 (Heap)
         * 
         * 부모 노드가 항상 자식노드보다 우선순위가 높은 속성을 만족하는 트리기반의 자료구조(이진트리)
         * 많은 자료 중 우선순위가 가장 높은 요소를 빠르게 가져오기 위해 사용
         *****************************/


        // PriorityQueue : 우선순위 큐

        // !트리기반 자료구조의 조건!
        // 1. 부모 + 자식 여러 명
        // 2. 역순은 불가능 (순환구조가 아니어야 함 / 순환구조면 트리가 아니라 그래프)
        // 3. 비선형 자료(일직선 구조가 아님)

        // 부모가 최대 2개의 자식을 가질 수 있는 건 이진트리
        // 6개를 가질 수 있는 건 헥사트리 (최다 사용)
        // 8개를 가질 수 있는 건 옥타트리라고 함

        // 시간복잡도
        // 탐색(가장 우선순위 높은)   추가          삭제
        // O(1)                    O(logN)       O(logN)


        /****************************************
         * 힙 정렬(Heap Sort)은 주어진 데이터를 힙 자료구조로 만들어 
         * 최댓값 또는 최솟값부터 하나씩 꺼내서 정렬하는 알고리즘입니다.
         * 힙 정렬이 가장 유용한 경우는 전체를 정렬하는 것이 아니라
         * 가장 큰 값 몇개만을 필요로 하는 경우입니다.
         * 시간 복잡도는 0(nlogn)입니다.
         ******************************************/


        /*********************************************
         * 배열로 이진 트리를 표현할 때는 인덱스 0은 root, 1은 root의 왼쪽 자식, 2는 root의 오른쪽 자식처럼
         * 완전 이진 트리에서 노드를 매다는 순서와 배열의 인덱스가 같습니다.
         * 완전 이진 트리에 자료를 매달 때 배열로 표현하면 보관한 마지막 자료 뒤에 보관합니다.
         * 하지만 완전 이진 트리가 아니면 계산에 의해 매달 위치를 찾아야 하며 비어있는 곳이 생깁니다.
         * 그렇기에 완전 이진 트리가 아닐 때는 노드를 이용하여 구현하는 것이 효과적입니다.
         * 반면 완전 이진 트리는 배열로 표현해도 메모리 낭비가 없기 때문에 노드를 이용하여 구현하지 않고
         * 배열로 표현할 때가 많습니다.
         ***********************************************/

        /***********
        * 이진트리의 배열 순서 이동법
        * 
        * 왼쪽 : index * 2 + 1 (ex: 1번 노드에서 3번 노드로 이동)
        * 오른쪽 : index * 2 + 2 (ex: 1번 노드에서 4번 노드로 이동)
        * 부모: (index - 1) / 2 (ex: 3번 노드에서 1번 노드로 이동)
        *******************/
    }
}
